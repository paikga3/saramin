$('#form_submit').click(function(){
	salaryCalc();
});

// 연봉/월급 선택
function hideTr () {
  var objRadio = $('severance_pay_show');
  var objSpan = $('severance_pay_hide');
  var objAnnual = $('annual');
  objRadio.style.display = 'none';
  objSpan.style.display = '';
  document.getElementById('annual').innerHTML = '월급';

}

function showTr () {
  var objRadio = $('severance_pay_show');
  var objSpan = $('severance_pay_hide');
  var objAnnual = $('annual');
  objRadio.style.display = '';
  objSpan.style.display = 'none';
  document.getElementById('annual').innerHTML = '연봉';
}

// 비과세 직접 입력 체크
function chkTaxFree () {
    var form = document.inputFrm;
    var objBox = $('tax_free_chk');
    if (objBox.checked == true) {
        form.tax_free.disabled = false;
        form.tax_free.value = '';
        form.tax_free.focus();
        form.tax_free.style.background = "";
        form.tax_free.style.border = "1px solid #8b75dc";
        form.tax_free.style.color = "#444";
    } else {
        form.tax_free.disabled = true;
        form.tax_free.value = '100000';
        form.tax_free.style.background = "#f3f3f3";
        form.tax_free.style.border = "1px solid #cfcfcf";
        form.tax_free.style.color = "#cccccc";
    }
}

// 콤마 지우기
function comma_del(box) {
    var i=0;
    var d;
    var outstr="";
    
    for(d = 0; d < box.value.length ; d++) {
        var subt= box.value.substring(d,d+1);
        if (subt != ",") {
            outstr += subt;
        }
    }     
    box.value=outstr;
    return true;
}

// 콤마 넣기
function comma_add(box) {
    var i; 
    var inits = "";
    var num_len = box.value.length;
    for(i=0; i<num_len; i++) {
        var sect=box.value.substring(i,i+1);
        if (sect != ",") {
            inits += sect;
        }  
    }
    box.value = parseInt(inits);
    
    ing=box.value.length % 3; 
    num_len=(box.value.length - ing) / 3;
    sect=box.value.substring(0,ing);
    
    for(i=0; i<num_len; i++) {
        if ((ing == 0) && (i == 0)) {
            sect += box.value.substring(ing+(3*i),ing+3+(3*i));  
        } else {
            sect += ",";
            sect += box.value.substring(ing+(3*i),ing+3+(3*i));  
        }
    }
    box.value = sect; 
    
    return true; 
}

// 숫자인지 체크하고 콤마 넣기
var oldText = "";

function replaceComma(str) { // 콤마 없애기 
    while(str.indexOf(",") > -1) { 
        str = str.replace(",", ""); 
    } 
    while(str.indexOf(" ") > -1) { // 공백 없애기
        str = str.replace(" ", "");
    }
    if(str.length > 10) {
        str = str.substring(0,10);
    }
    return str; 
} 
 
function numChk(num){
    var rightchar = replaceComma(num.value);
    var moneychar = "";

    for(index = rightchar.length-1; index>=0; index--) {
        splitchar = rightchar.charAt(index);
        if (isNaN(splitchar)) {
            alert(splitchar +"는 숫자가 아닙니다. \n다시 입력해주세요.");
            num.value = "";      //num.value = oldText; 이전text반환
            num.focus();
            return;
        }
        moneychar = splitchar+moneychar;
    }
    oldText = moneychar;
}

function dependentChk(num){
    var form = document.inputFrm;
    var rightchar = replaceComma(num.value);
    var moneychar = "";

    for(index = rightchar.length-1; index>=0; index--) {
        splitchar = rightchar.charAt(index);
        if (isNaN(splitchar)) {
            alert(splitchar +"는 숫자가 아닙니다. \n다시 입력해주세요.");
            num.value = "";      //num.value = oldText; 이전text반환
            num.focus();
            return;

        }
        moneychar = splitchar+moneychar;
        if (index%3==rightchar.length%3&&index!=0) {
            moneychar=','+moneychar;
        }
        
    }
    num.value = moneychar;
    
    if(num.value > 11){
    	alert("부양가족수 12명 이상은 11명과 동일하게 계산되므로\r11명까지만 입력이 가능합니다.");
    	num.value = 10;      //num.value = oldText; 이전text반환
    }
    
    if(num.value == 0 || num.value == '') {
        num.value = 0;
    }
}

function trans_han(sour, targ){ 
   s = replaceComma(document.getElementsByName(sour)[0].value); 
   t = $(targ); 
   
   var rightchar = replaceComma(document.getElementsByName(sour)[0].value);
   var moneychar = "";
   
   b1 = ' 일이삼사오육칠팔구'; 
   b2 = '천백십조천백십억천백십만천백십원'; 
   tmp = ''; 
   cnt = 0; 
   while(s != '') { 
       cnt++; 
       tmp1 = b1.substring(s.substring(s.length-1,s.length), Number(s.substring(s.length-1,s.length))+1); // 숫자 
       tmp2 = b2.substring(b2.length-1,b2.length); // 단위 
       if (tmp1==' ') { // 숫자가 0일때 
           if (cnt%4 == 1) { // 4자리로 끊어 조,억,만,원 단위일때만 붙여줌 
               tmp = tmp2 + tmp; 
           } 
       } else { 
           if (tmp1 == '일' && cnt%4 != 1) { // 단위가 조,억,만,원일때만 숫자가 일을 붙여주고 나머지는 생략 ex) 삼백일십만=> 삼백십만 
               tmp = tmp2 + tmp; 
           } else { 
               tmp = tmp1 + tmp2 + tmp; // 그외에는 단위와 숫자 모두 붙여줌 
           } 
       } 
       b2 = b2.substring(0, b2.length-1); 
       s = s.substring(0, s.length-1); 
   } 
   tmp = tmp.replace('억만','억').replace('조억','조').replace('원',''); // 조,억,만,원 단위는 모두 붙였기 때문에 필요없는 단위 제거 //원 제거
   if(tmp == '') {
       tmp = '- ';
   }
   t.innerHTML = tmp; 
   
   for (index = rightchar.length-1; index>=0; index--) {
        splitchar = rightchar.charAt(index);
        if (isNaN(splitchar)) {
            alert(splitchar +"는 숫자가 아닙니다. \n다시 입력해주세요.");
            $('trans_price').innerHTML = "- ";
            document.getElementsByName(sour)[0].value = "";
            document.getElementsByName(sour)[0].focus();
            return;
        }
        moneychar = splitchar+moneychar;
    }
    oldText = moneychar;
}

// 풍선도움말 보이기
function showTip (el, num) {
    var elt         = $(el),
        elPos       = elt.positionedOffset(),
        elPosTop    = elPos.top,
        tipLayer    = $(num),
        dimensions  = tipLayer.getDimensions(),
        tipLayerTop = elPosTop - dimensions.height;
    
    tipLayer.style.top     = tipLayerTop;
    tipLayer.style.display = '';
}

// 풍선도움말 숨기기
function hideTip (num) {
    $(num).style.display = 'none';
}

// 입력값 초기화
function reseting() {
    var form = document.inputFrm;
    showTr();
    form.reset();
    form.tax_free.disabled = true;
    form.tax_free.style.background = "#f3f3f3";
    form.tax_free.style.border = "1px solid #cfcfcf";
    form.tax_free.style.color = "#f14c37";
    $('trans_price').innerHTML = "- ";
    form.under_twenty.value = 0;
    
    for (var i=1; i<=10; i++) {
        $('calcHelp' + i).style.display = 'none';
    }
    cc=0;
    
}
// 20세 이하 사람수 늘리기.
function plusUnderTwenty(){
	 var form = document.inputFrm;
	 if(parseInt(form.under_twenty.value) < 10){
		 form.under_twenty.value ++;
	 }
	 else{
		 alert("20세 이하 자녀수는 10명 이상은 10명과 동일하게\r 계산되므로 10명까지만 입력이 가능합니다.");
	 }
}
 
// 20세 이하 사람수 줄이기.
function minusUnderTwenty(){
	 var form = document.inputFrm;
	 if(parseInt(form.under_twenty.value) > 0){
	 form.under_twenty.value --;
	 }
}
 
//#################################################  계산하기 시작 #################################################//
function salaryCalc() {
    /*var form = document.getElementById("inputFrm");
    // =================================== validation ====================================== //
    if (form.pay.value == "") {
        if (form.salary_type[0].checked == true) {
            alert("연봉이 입력되지 않았습니다.");
        } else if (form.salary_type[1].checked == true) {
            alert("월급이 입력되지 않았습니다.");
        }
        form.pay.focus();
        return false;
    }
    if (form.tax_free.value == "") {
        alert("비과세액이 입력되지 않았습니다.");
        form.tax_free.focus();
        return false;
    }
    if(parseInt(form.under_twenty.value) >= parseInt(form.dependent.value)){
    	alert("20세이하자녀수가 부양가족수보다 크거나 같습니다.");
    	 form.dependent.focus();
         return false;
    }
    if (form.dependent.value == ""|| form.dependent.value == "0") {
        alert("부양가족수가 입력되지 않았습니다.\n본인도 부양가족수에 해당함으로, 1 이상의 수를 입력하세요.");
        form.dependent.focus();
        return false;
    }
    // 입력받은 값에서 콤마 지우기
    for (i = 0 ; i < form.elements.length ; i++) {
        if (form.elements[i].type == "text") {
            comma_del(form.elements[i]);
        }
    }*/

    // =================================== 변수 설정 ====================================== //
    //사용자 입력값받기
    var input_pay = parseInt($('#pay').val());  // 급여액
    var tax_free = parseInt($('#tax_free').val()); // 비과세액
    var dependent = parseInt($('#dependent').val()); // 부양가족수
    var under_twenty = parseInt($('#under_twenty').val()); // 20세이하자녀수

    //radio box 값 받기 - 선택된 인덱스(0or1)를 값에 넣어준다.
    var choose_period = null; // 연봉/월급 선택
    var retirement_include = null; // 퇴직금 선택
    if(document.getElementsByName('salary_type')[0].checked){
    	choose_period = 0;
    	if(document.getElementsByName('severance_pay_yn')[0].checked){
    		retirement_include = 0;
    	} else if(document.getElementsByName('severance_pay_yn')[1].checked){
    		retirement_include = 1;
    	}
    } else if(document.getElementsByName('salary_type')[1].checked) {
    	choose_period = 1;
    }
    
    
	// ==================================== api 호출 ======================================== //
   
    
    $.ajax({
        url: 'http://www.saramin.co.kr/zf_user/tools/salary-calculator-result',
        type: 'get',
        data: {
            input_pay: input_pay,
            tax_free: tax_free,
            dependent: dependent,
            under_twenty: under_twenty,
            choose_period: choose_period,
            retirement_include: retirement_include
        },
        success: function (result) {
            var s = result.responseText;
            var start = s.indexOf("{");
            var end = s.indexOf("}");
            s = s.substring(start, end + 1);
            var obj = JSON.parse(s);
            $('#national_pension').val(obj.national_pension);
            $('#health_insurance').val(obj.health_insurance);
            $('#longterm_care_insurance').val(obj.longterm_care_insurance);
            $('#unemployment_insurance').val(obj.unemployment_insurance);
            $('#income_tax').val(obj.income_tax);
            $('#residence_tax').val(obj.residence_tax);
            $('#total_tax_deduction').val(obj.total_tax_deduction);
            $('#after_tax_income').val(obj.after_tax_income);
        },
        error: function (jqXHR, textStatus, errorThrown) {
            alert("에러" + textStatus + errorThrown);
        }
    });
}